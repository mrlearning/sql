1. Создать БД
CTREATE DATABASE my_database;

2. Удалить БД
DROP DATABASE my_database;

3. Создать таблицу
CREATE TABLE my_table(id INT, name varchar(255));

4. Удалить таблицу
DROP TABLE my_table;

5. Добавить столбец в таблицу
ALTER TABLE my_table ADD lastname varchar(255);

5. Удалить столбец из таблицы
ALTER TABLE my_table DROP COLUMN lastname;

6. Изментить тип данных столбца в таблице
ALTER TABLE my_table ALTER COLUMN id varchar(255);

7. Установить на столбец ограничение - не нулевое значение
ALTER TABLE my_table ALTER COLUMN name varchar(255) NOT NULL

8. Установить на столбец ограничение - уникальное значение
CREATE TABLE my_table(id INT NOT NULL UNIQUE);

9. Установить на столбец ограничение - первичный ключ (уникальное ненулевое значение)
CREATE TABLE my_table(id INT, name VARCHAR(255), PRIMARY KEY (id));

10. Установить на столбец ограничение - связать 2 таблицы с помощью внешнего ключа
CREATE TABLE persons(id INT PRIMARY KEY, name VARCHAR(255));
CREATE TABLE orders(order_number INT PRIMARY KEY, person_id INT, FOREING KEY (person_id) REFERENSES persons(id));

11. Установить на столбец ограничение - задать диапазон значений
CREATE TABLE persons(name VARCHAR(255), age INT, CHECK (age>=18));

12. Установить на столбец ограничение - задать значение по умолчанию
CREATE TABLE persons(name VARCHAR(255), city VARCHAR(255) DEFAULT 'Moskow');

13. Установить на столбец ограничение - добавить индексацию
CREATE INDEX my_index ON my_table(name, lastname);
CREATE UNIQUE INDEX my_index ON my_table(name, lastname);

14. Создать столбец с автоматическим инкрементированием значения
CREATE TABLE my_table(id INT NOT NULL AUTO_INCREMENT, name VARCHAR(255));

15. Создать виртуальную БД
CREATE VIEW my_view AS SELECT id, name FROM my_table WHERE age>40;

16. Выбрать из таблицы несколько столбцов
SELECT name, age from peoples;

17. Выбрать из таблицы все столбцы
SELECT * FROM my_table;

18. Выбрать уникальные сочетания имени и фамилии из таблицы
SELECT DISTINCT name, lastname FROM my_table;

19. Выбрать строки из таблицы по условию
SELECT * FROM my_table WHERE city='Moskow';

20. Выбрать строки по условию "И"
SELECT * FROM my_table WHERE name='Vasia' and city='Moskow';

21. Выбрать строки по условию "ИЛИ"
SELECT * FROM my_table WHERE age>40 OR city='Moskow';

22. Выбрать строки по условию "НЕ"
SELECT * FROM my_table WHERE NOT country='USA';

23. Отсортировать выборку по возрастанию
SELECT * FROM people ORDER BY age ASC;

24. Отсортировать выборку по убыванию
SELECT * FROM people ORDER BY age DESC;

25. Отсортировать выборку и по убыванию, и по возрастанию
SELECT * FROM people ORDER BY age ASC, city DESC;

26. Вставить строки в таблицу
INSERT INTO people(name, lastname, city) VALUES ('Vasia', 'Pupkin', 'Omsk');

27. Выбрать из таблицы people строки, где поле lastname пустое, а поле city не пустое
SELECT * FROM people WHERE lastname IS NULL AND city IS NOT NULL;

28. Присвоить полю city значение Moskow для всех строк в таблице people
UPDATE people SET city='Moskow';

29. Присвоить полю city значение Omsk для строки с идентификатором 3
UPDATE people SET city='Omsk' WHERE id=3;

30. Удалить все записи из таблицы
DELETE FROM people;
DELETE * FROM people;

31. Удалить все строки, где поле city имеет значение Omsk
DELETE FROM people WHERE city='Omsk';

32. Выбрать первые 3 строчки из таблицы
SELECT TOP 3 * FROM people;
SELECT * FROM people LIMIT 3;
SELECT * FROM people WHERE ROWNUM <=3;

33. Получить первые 50% от результатов выборки
SELECT TOP 50 PERCENT * FROM people;

34. Выбрать минимальное и максимальное значения из столбца
SELECT MIN(id) AS min_id, MAX(id) AS max_id FROM people;

35. Получить число строк, удовлетворяющих условию
SELECT COUNT(city) FROM people WHERE city='Moskow';

36. Получить среднее значение в числовом столбце
SELECT AVG(age) FROM people WHERE city='Moskow';

37. Получить сумму значений
SELECT SUM(age) FROM people WHERE city='Omsk';

38. Получить строки, где поле начинается с буквы a или заканчивается буквой a
SELECT * FROM people WHERE name LIKE 'a%' OR name LIKE '%a'

39. Получить строки, где второй символ поля - a
SELECT * FROM people WHERE name LIKE '_a%';

40. Выбрать все строки, в которых поле name начинается с одной из букв a, b или с
SELECT * FROM people WHERE name LIKE '[abc]%';

41. Выбрать все строки, в которых поле name не начинается с букв a, b или c
SELECT * FROM people WHERE name LIKE '[!abc]%';
SELECT * FROM people WHERE name NOT LIKE '[abc]%';

42. Выбрать все строки, где city Moskow или Omsk
SELECT * FROM people WHERE city IN ('Moskow', 'Omsk');

43. Выбрать все строки, где возраст между 20 и 40 лет
SELECT * FROM people WHERE age BETWEEN 20 AND 40;

44. Выбрать все строки, где имя между Васей и Петей
SELECT * FROM people WHERE name BETWEEN 'Vasia' AND 'Petia' ORDER BY name;

45. Выбрать все строки, где поле дата между 4м июля 1996 и 9м июля 1996
SELECT * FROM mytable WHERE mydate BETWEEN #07/04/1996# AND #07/09/1996#;

46. Выбрать столбец под псевдонимом
SELECT name AS username FROM people;

47. Выбрать таблицу под псевдонимом
SELECT * FROM people AS users;

48. Выбрать людей из таблыцы people, проживающих в городах с населением больше 1000000
SELECT p.name, p.lastname FROM people AS p, cities AS c WHERE p.city = c.city AND c.population > 1000000;

49. Выбрать города из таблицы people и численность населения из таблицы cities
SELECT people.city, cities.population FROM people INNER JOIN cities ON people.city = cities.city;

50. Вывести все города из таблицы people и, если город присутствует в таблице cities, получить численность населения
SELECT people.city, cities.population FROM people LEFT JOIN cities ON people.city = cities.city;

51. Вывести все города из таблицы cities и проживающих в них людей из таблицы people
SELECT people.name, people.lastname, cities.city FROM people RIGHT JOIN cities ON people.city = cities.city;

52. Вывести всех людей из таблицы people и все города из таблицы cities
SELECT people.name, people.lastname, cities.city FROM people FULL OUTER JOIN cities ON people.city = cities.city;

53. Вывести в 2 столбца имена людей, проживающих в одном городе
SELECT a.name, b.name, a.city FROM people a, people b WHERE a.id<>b.id AND a.city=b.city;